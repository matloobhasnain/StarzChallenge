//
//  TVShowInfoViewController.swift
//  StarsPlayChallenge
//
//  Created by Matloob on 10/9/20.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TVShowInfoDisplayLogic: class
{
    func presentShowDetail(viewModel: TVShowInfo.TVShow.ViewModel)
    func presentSeasonDetail(viewModel: SeasonInfo.seasonDetail.ViewModel)
}

class TVShowInfoViewController: UIViewController
{
    
    @IBOutlet weak var seasonCollectionView: UICollectionView!
    @IBOutlet weak var tableView: UITableView!
    
    var tvShowBaseInfo: TVShowBase?
    var selecteSeasonBase: SeasonModel?
    var selectedSeasonToLoad = 0
    
    
    var interactor: TVShowInfoBusinessLogic?
    var router: (NSObjectProtocol & TVShowInfoRoutingLogic & TVShowInfoDataPassing)?
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = TVShowInfoInteractor()
        let presenter = TVShowInfoPresenter()
        let router = TVShowInfoRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        fetchTvshow()
        //fetchSeasonInfo()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func fetchTvshow()
    {
        let request = TVShowInfo.TVShow.Request(tv_id: "76479")
        interactor?.fetchTVShow(request: request)
    }
    
    func fetchSeasonInfo(seasonNumber: Int) {
        
        let request = SeasonInfo.seasonDetail.Request(tv_id: "76479", season_number: "\(seasonNumber)")
        interactor?.fetchSeasonDetail(request: request)
    }
    
    //
    
    func updateSeasonListUIWithLoadedData() {
        DispatchQueue.main.async {
            self.seasonCollectionView.reloadData()
            if self.tvShowBaseInfo?.seasons?.count ?? 0 > 0 {
                if let season = self.tvShowBaseInfo?.seasons? [0] {
                    self.fetchSeasonInfo(seasonNumber: season.season_number ?? 0)
                }
             }
        }
    }
    
    
    
}

extension TVShowInfoViewController: TVShowInfoDisplayLogic {
    
    func presentSeasonDetail(viewModel: SeasonInfo.seasonDetail.ViewModel) {
        guard let seasonInfo = viewModel.seasonModel else { return }
        selecteSeasonBase = seasonInfo
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
        
    }
    
    func presentShowDetail(viewModel: TVShowInfo.TVShow.ViewModel) {
        
        guard let showInfo = viewModel.tvShowDetail else { return }
        tvShowBaseInfo = showInfo
        updateSeasonListUIWithLoadedData()
    }
    
}



extension TVShowInfoViewController: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout{
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return tvShowBaseInfo?.number_of_seasons ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = seasonCollectionView.dequeueReusableCell(withReuseIdentifier: "SeasonCell", for: indexPath) as! SeasonCell
        cell.configureSeasonCell(season: tvShowBaseInfo?.seasons, row: indexPath.row)
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if self.tvShowBaseInfo?.seasons?.count ?? 0 > 0 {
            if let season = self.tvShowBaseInfo?.seasons?[indexPath.row] {
                self.fetchSeasonInfo(seasonNumber: season.season_number ?? 0)
            }
         }
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let width = seasonCollectionView.frame.width / 4 - 1
        return CGSize(width: width, height: width)
    }
}

extension TVShowInfoViewController: UITableViewDelegate, UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return selecteSeasonBase?.episodes?.count ?? 0
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "EpisodeCell", for: indexPath) as! EpisodeCell
        let episode = selecteSeasonBase?.episodes?[indexPath.row]
        cell.confifureEpisodeCell(episode: episode)
        return cell
    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 90
    }
}
